---
# build artifacts on mc: always package, name by git tag
- name: build artifacts on mc
  hosts: all
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: false

  vars:
    repo_url: "https://github.com/Leox1024/sgrodolcraft.git"
    repo_dir: "/home/mc/sgrodolcraft-src"
    artifacts_dir: "/home/mc/artifact"
    stage_dir: "/tmp/sgrodocraft_build"

  pre_tasks:
    - name: ensure tools
      package:
        name: [git, zip, unzip]
        state: present

    - name: ensure artifact dir
      file:
        path: "{{ artifacts_dir }}"
        state: directory
        owner: mc
        group: mc
        mode: "0755"

  tasks:
    - name: clone or update repo
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dir }}"
        version: main
        force: yes

    - name: read latest tag (v*) if present
      command: git -C "{{ repo_dir }}" describe --tags --abbrev=0 --match "v*"
      register: tag_out
      changed_when: false
      failed_when: false

    - name: read short sha
      command: git -C "{{ repo_dir }}" rev-parse --short=7 HEAD
      register: sha_out
      changed_when: false

    - name: set version variables
      set_fact:
        version_tag: "{{ (tag_out.rc == 0 and tag_out.stdout|length>0) | ternary(tag_out.stdout, 'untagged-' ~ sha_out.stdout) }}"
        commit_sha: "{{ sha_out.stdout }}"

    - name: prepare stage dir
      file:
        path: "{{ stage_dir }}"
        state: directory
        mode: "0755"

    - name: copy payload to stage
      shell: |
        set -e
        rm -rf "{{ stage_dir }}"/* || true
        cp -r "{{ repo_dir }}/server.properties" "{{ stage_dir }}/" 2>/dev/null || true
        cp -r "{{ repo_dir }}/config" "{{ stage_dir }}/" 2>/dev/null || true
        cp -r "{{ repo_dir }}/plugins" "{{ stage_dir }}/" 2>/dev/null || true
        cp -r "{{ repo_dir }}/mods" "{{ stage_dir }}/" 2>/dev/null || true
        cp -r "{{ repo_dir }}/run.sh" "{{ repo_dir }}/user_jvm_args.txt" "{{ stage_dir }}/" 2>/dev/null || true
      args: { executable: /bin/bash }

    - name: create zip
      archive:
        path: "{{ stage_dir }}/"
        dest: "{{ artifacts_dir }}/config-{{ version_tag }}.zip"
        format: zip

    - name: write manifest
      copy:
        dest: "{{ artifacts_dir }}/config-{{ version_tag }}.json"
        mode: "0644"
        content: |
          { "tag": "{{ version_tag }}",
            "commit": "{{ commit_sha }}",
            "created_at": "{{ lookup('pipe','date -Iseconds') | trim }}",
            "zip": "config-{{ version_tag }}.zip" }

    - name: update latest pointers
      copy:
        dest: "{{ artifacts_dir }}/latest.txt"
        mode: "0644"
        content: "{{ version_tag }}\n"
    - file:
        src: "{{ artifacts_dir }}/config-{{ version_tag }}.zip"
        dest: "{{ artifacts_dir }}/config-latest.zip"
        state: link
        force: yes

  post_tasks:
    - name: cleanup stage
      file: { path: "{{ stage_dir }}", state: absent }

    # zip
    - name: find zip artifacts
      ansible.builtin.find:
        paths: "{{ artifacts_dir }}"
        patterns: "config-*.zip"
        file_type: file
      register: zips
    
    - name: remove old zip artifacts (keep 10 newest)
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ (zips.files | sort(attribute='mtime', reverse=True))[10:] | default([]) }}"
    
    # json
    - name: find json manifests
      ansible.builtin.find:
        paths: "{{ artifacts_dir }}"
        patterns: "config-*.json"
        file_type: file
      register: jsons
    
    - name: remove old json manifests (keep 10 newest)
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ (jsons.files | sort(attribute='mtime', reverse=True))[10:] | default([]) }}"
    
    - name: fix ownership to mc
      command: chown -R mc:mc "{{ artifacts_dir }}"
      changed_when: false

    - name: set permissions 755/644 in artifacts
      shell: |
        find "{{ artifacts_dir }}" -type d -exec chmod 755 {} \;
        find "{{ artifacts_dir }}" -type f -exec chmod 644 {} \;
      changed_when: false