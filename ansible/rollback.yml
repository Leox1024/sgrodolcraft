---
- name: rollback to previous build (local artifacts)
  hosts: all
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: false

  vars:
    target_dir: "/home/mc/minecraft-survival"
    service_name: "mc-survival-java"
    mc_port: 25565
    artifacts_dir: "/home/mc/artifact"
    stage_dir: "/tmp/sgrodocraft_rollback"

  pre_tasks:
    - name: ensure tools
      package:
        name: [rsync, unzip]
        state: present

  tasks:
    - name: read current deployed tag
      slurp:
        src: "{{ target_dir }}/.last_good_commit"
      register: current_tag_file
      failed_when: false

    - name: fail if marker missing
      fail:
        msg: "current tag marker not found; run a normal deploy first"
      when: current_tag_file.content is not defined

    - name: set current_tag
      set_fact:
        current_tag: "{{ (current_tag_file.content | b64decode).strip() }}"

    - name: compute previous tag
      shell: |
        set -e
        cur="{{ current_tag }}"
        mapfile -t list < <(ls -1t {{ artifacts_dir }}/config-*.zip 2>/dev/null | sed -E 's|.*/config-([^.]+)\.zip|\1|')
        for i in "${!list[@]}"; do
          if [[ "${list[$i]}" == "$cur" ]]; then
            j=$((i+1))
            if [[ $j -lt ${#list[@]} ]]; then
              echo -n "${list[$j]}"
              exit 0
            fi
          fi
        done
        exit 1
      register: prev_cmd
      changed_when: false

    - name: fail if no previous artifact
      fail:
        msg: "no previous artifact found for current tag {{ current_tag }}"
      when: prev_cmd.rc != 0 or prev_cmd.stdout | length == 0

    - name: set prev vars
      set_fact:
        prev_tag: "{{ prev_cmd.stdout }}"
        prev_zip: "{{ artifacts_dir }}/config-{{ prev_cmd.stdout }}.zip"

    - name: stop minecraft
      systemd:
        name: "{{ service_name }}"
        state: stopped
      ignore_errors: yes

    - name: create staging dir
      file:
        path: "{{ stage_dir }}"
        state: directory
        mode: "0755"
        owner: mc
        group: mc

    - name: unarchive previous artifact
      unarchive:
        src: "{{ prev_zip }}"
        dest: "{{ stage_dir }}"
        remote_src: yes
        owner: mc
        group: mc

    - name: rsync to target (preserve worlds/logs, force mc ownership)
      delegate_to: "{{ inventory_hostname }}"
      synchronize:
        src: "{{ stage_dir }}/"
        dest: "{{ target_dir }}/"
        archive: yes
        delete: no
        rsync_opts:
          - "--exclude=world/"
          - "--exclude=logs/"
          - "--exclude=crash-reports/"
          - "--exclude=*.lock"
          - "--exclude=eula.txt"
          - "--exclude=backups/"
          - "--chown=mc:mc"
          - "--chmod=D755,F644"

    - name: cleanup staging
      file:
        path: "{{ stage_dir }}"
        state: absent

    - name: enforce ownership
      command: chown -R mc:mc "{{ target_dir }}"
      changed_when: false

    - name: start minecraft
      systemd:
        name: "{{ service_name }}"
        state: started
        enabled: yes

    - name: health-check
      wait_for:
        host: 127.0.0.1
        port: "{{ mc_port }}"
        delay: 2
        timeout: 60

    - name: update marker
      copy:
        content: "{{ prev_tag }}\n"
        dest: "{{ target_dir }}/.last_good_commit"
        owner: mc
        group: mc
        mode: "0644"