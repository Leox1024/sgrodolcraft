- name: update mods and restart minecraft
  hosts: all
  become: yes
  become_user: root
  become_method: sudo

  vars:
    mc_service: "fake.service"
    mc_src_properties: "/fake/path/server.properties"
    mc_src_userjvmarg: "/fake/path/userjvmarg"
    mc_dst_properties: "/fake/path/server.properties"
    mc_dst_userjvmarg: "/fake/path/userjvmarg"
    mods_src: "/fake/path"
    mods_dst: "/fake/path"

  tasks:
    - name: stop minecraft service
      ansible.builtin.systemd:
        name: "{{ mc_service }}"
        state: stopped

    # ---------------------------------------------
    
    - name: remove properties file dst
      ansible.builtin.file:
        path: "{{ mc_dst_properties }}"
        state: absent
    
    - name: copy properties from src to dst
      ansible.builtin.copy:
        src: "{{ mc_src_properties }}"
        dest: "{{ mc_dst_properties }}"
        remote_src: true
        owner: mc
        group: mc
        mode: "0744"

    - name: remove userjvm file dst
      ansible.builtin.file:
        path: "{{ mc_dst_userjvmarg }}"
        state: absent
        
    - name: copy userjvm from src to dst
      ansible.builtin.copy:
        src: "{{ mc_src_userjvmarg }}"
        dest: "{{ mc_dst_userjvmarg }}"
        remote_src: true
        owner: mc
        group: mc
        mode: "0744"
        
    # ---------------------------------------------

    - name: rm files in destination mods dir
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ dst_mods_list.files }}"
      when: dst_mods_list.matched | int > 0
      
    # ---------------------------------------------
    

    - name: copy mods from src to dst
      ansible.builtin.copy:
        src: "{{ mods_src }}/"
        dest: "{{ mods_dst }}/"
        mode: "0744"
        owner: mc
        group: mc
        remote_src: true

    - name: fix ownership recursively on mods dst
      ansible.builtin.file:
        path: "{{ mods_dst }}/"
        owner: mc
        group: mc
        recurse: yes

    # ---------------------------------------------

    - name: start minecraft service
      ansible.builtin.systemd:
        name: "{{ mc_service }}"
        state: started
        daemon_reload: true

    - name: verify service is active
      ansible.builtin.command: "systemctl is-active {{ mc_service }}"
      register: mc_start_check
      changed_when: false
      failed_when: mc_start_check.stdout != "active"
