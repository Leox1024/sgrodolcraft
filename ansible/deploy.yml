---
- name: deploy config to mc (tag-based)
  hosts: all
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: false

#------------------------------------------#

  vars:
    target_dir: "/home/mc/minecraft-survival"
    service_name: "mc-survival-java"
    mc_port: 25565
    artifacts_dir: "/home/mc/artifact"
    set_motd_from_tag: true
    protect_paths:
      - "world*/"
      - "logs/"
      - "crash-reports/"
      - "backups/"
      - "cache/"
      - "debug/"
      - "rcon.pipe"
      - "usercache.json"
      - "banned-ips.json"
      - "banned-players.json"
      - "whitelist.json"
      - "ops.json"
      - "versions/"
      - "libraries/"
      - "plugins/*/data/**"
      - "plugins/*/cache/**"
      - "plugins/*/logs/**"
      - "plugins/*/storage/**"

#------------------------------------------#

  pre_tasks:
    - name: ensure target dir
      ansible.builtin.file:
        path: "{{ target_dir }}"
        state: directory
        owner: mc
        group: mc
        mode: "0755"

    - name: read latest tag file
      ansible.builtin.slurp:
        src: "{{ artifacts_dir }}/latest.txt"
      register: latest_tag_file
      failed_when: false

    - name: derive tag from latest.txt
      ansible.builtin.set_fact:
        tag_from_latest: "{{ (latest_tag_file.content | default('') | b64decode | trim) | default('', true) }}"

    - name: derive tag from symlink
      ansible.builtin.shell: |
        set -e
        if [ -L "{{ artifacts_dir }}/config-latest.zip" ] || [ -f "{{ artifacts_dir }}/config-latest.zip" ]; then
          real="$(readlink -f "{{ artifacts_dir }}/config-latest.zip" || echo "")"
          echo "$real" | sed -E 's|.*/config-(.+)\.zip|\1|'
        fi
      args: { executable: /bin/bash }
      register: tag_from_symlink
      changed_when: false
      failed_when: false

    - name: derive tag from newest zip
      ansible.builtin.shell: |
        set -e
        ls -1t {{ artifacts_dir }}/config-*.zip 2>/dev/null | head -1 | sed -E 's|.*/config-(.+)\.zip|\1|'
      args: { executable: /bin/bash }
      register: tag_from_newest
      changed_when: false
      failed_when: false

    - name: choose deploy tag and stage dir
      ansible.builtin.set_fact:
        deploy_tag: >-
          {{
            tag_from_latest
            if (tag_from_latest is string and (tag_from_latest | length) > 0 and (tag_from_latest is regex('^(v|untagged-)')))
            else (tag_from_symlink.stdout | trim)
            if ((tag_from_symlink.stdout | trim) | length) > 0
            else (tag_from_newest.stdout | trim)
          }}
        stage_dir: "/tmp/sgrodocraft_{{ (
          tag_from_latest
          if (tag_from_latest is string and (tag_from_latest | length) > 0 and (tag_from_latest is regex('^(v|untagged-)')))
          else (tag_from_symlink.stdout | trim)
          if ((tag_from_symlink.stdout | trim) | length) > 0
          else (tag_from_newest.stdout | trim)
        ) }}"

#------------------------------------------#

  tasks:
    - name: stop minecraft
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: stopped
      ignore_errors: yes

    - name: create staging dir
      ansible.builtin.file:
        path: "{{ stage_dir }}"
        state: directory
        mode: "0755"

    - name: unarchive artifact to staging
      ansible.builtin.unarchive:
        src: "{{ artifacts_dir }}/config-{{ deploy_tag }}.zip"
        dest: "{{ stage_dir }}"
        remote_src: yes

    - name: set motd from tag (optional)
      when: set_motd_from_tag
      ansible.builtin.lineinfile:
        path: "{{ stage_dir }}/server.properties"
        regexp: '^motd='
        line: "motd=sgrodolcraft {{ deploy_tag }}"
        create: yes
        mode: "0644"

    - name: rsync staging to target (preserve worlds/logs etc)
      ansible.builtin.shell: >
        rsync -a
        {{ protect_paths | map('regex_replace', '^(.*)$', "--exclude='\\1'") | join(' ') }}
        "{{ stage_dir }}/" "{{ target_dir }}/"
      args:
        executable: /bin/bash

    - name: cleanup staging
      ansible.builtin.file:
        path: "{{ stage_dir }}"
        state: absent

    - name: fix ownership to mc on target
      ansible.builtin.file:
        path: "{{ target_dir }}"
        owner: mc
        group: mc
        recurse: yes

    - name: set default perms 755/644 on target
      ansible.builtin.shell: |
        find "{{ target_dir }}" -type d -exec chmod 755 {} \;
        find "{{ target_dir }}" -type f -exec chmod 644 {} \;
      changed_when: false

    - name: ensure scripts are executable
      ansible.builtin.shell: |
        [ -f "{{ target_dir }}/run.sh" ] && chmod 755 "{{ target_dir }}/run.sh" || true
        find "{{ target_dir }}" -type f -name '*.sh' -exec chmod 755 {} \;
      changed_when: false

    - name: start minecraft
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: started
        enabled: yes

    - name: health-check
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: "{{ mc_port }}"
        delay: 2
        timeout: 60

    - name: ensure marker dir exists
      ansible.builtin.file:
        path: "{{ target_dir }}"
        state: directory
        owner: mc
        group: mc
        mode: "0755"

    - name: save deployed tag marker
      ansible.builtin.copy:
        dest: "{{ target_dir }}/.last_good_commit"
        owner: mc
        group: mc
        mode: "0644"
        force: yes
        content: "{{ deploy_tag }}\n"

#------------------------------------------#

  post_tasks:
    - name: always clean staging even if failed
      ansible.builtin.file:
        path: "{{ stage_dir }}"
        state: absent
      ignore_errors: yes
