---
- name: deploy config to mc (tag-based)
  hosts: all
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: false

  vars:
    target_dir: "/home/mc/minecraft-survival"
    service_name: "mc-survival-java"
    mc_port: 25565
    artifacts_dir: "/home/mc/artifact"
    set_motd_from_tag: true

    protect_paths:
      - "world/"
      - "logs/"
      - "crash-reports/"
      - "*.lock"
      - "eula.txt"
      - "backups/"

  pre_tasks:
    - name: ensure target dir
      file:
        path: "{{ target_dir }}"
        state: directory
        owner: mc
        group: mc
        mode: "0755"

    - name: read latest tag from artifact dir (remote)
      slurp:
        src: "{{ artifacts_dir }}/latest.txt"
      register: latest_tag_file
      failed_when: latest_tag_file is failed or latest_tag_file.content is not defined

    - name: set deploy tag
      set_fact:
        deploy_tag: "{{ (latest_tag_file.content | b64decode).strip() }}"
        stage_dir: "/tmp/sgrodocraft_{{ (latest_tag_file.content | b64decode).strip() }}"

  tasks:
    - name: stop minecraft
      systemd:
        name: "{{ service_name }}"
        state: stopped
      ignore_errors: yes

    - name: create staging dir
      file:
        path: "{{ stage_dir }}"
        state: directory
        mode: "0755"

    - name: unarchive artifact to staging
      unarchive:
        src: "{{ artifacts_dir }}/config-{{ deploy_tag }}.zip"
        dest: "{{ stage_dir }}"
        remote_src: yes

    - name: set motd from tag (optional)
      when: set_motd_from_tag
      lineinfile:
        path: "{{ stage_dir }}/server.properties"
        regexp: '^motd='
        line: "motd=sgrodolcraft {{ deploy_tag }}"
        create: yes
        mode: "0644"

    - name: rsync staging to target (preserve world/logs)
      synchronize:
        src: "{{ stage_dir }}/"
        dest: "{{ target_dir }}/"
        archive: yes
        delete: no
        rsync_opts:
          - "--exclude=world*/"
          - "--exclude=logs/"
          - "--exclude=crash-reports/"
          - "--exclude=*.lock"
          - "--exclude=eula.txt"
          - "--exclude=backups/"
      delegate_to: "{{ inventory_hostname }}"
      mode: push

    - name: cleanup staging
      file:
        path: "{{ stage_dir }}"
        state: absent

    - name: fix ownership to mc on target
      file:
        path: "{{ target_dir }}"
        owner: mc
        group: mc
        recurse: yes

    - name: set permissions 755/644 on target
      shell: |
        find "{{ target_dir }}" -type d -exec chmod 755 {} \;
        find "{{ target_dir }}" -type f -exec chmod 644 {} \;
      changed_when: false

    - name: start minecraft
      systemd:
        name: "{{ service_name }}"
        state: started
        enabled: yes

    - name: health-check
      wait_for:
        host: 127.0.0.1
        port: "{{ mc_port }}"
        delay: 2
        timeout: 60

    - name: save deployed tag marker
      copy:
        dest: "{{ target_dir }}/.last_good_commit"
        owner: mc
        group: mc
        mode: "0644"
        content: "{{ deploy_tag }}\n"

  post_tasks:
    - name: always clean staging even if failed
      file:
        path: "{{ stage_dir }}"
        state: absent
      ignore_errors: yes