- name: update mods and restart minecraft
  hosts: all
  become: yes
  become_user: root
  become_method: sudo

  vars:
    mc_service: "fake.service"
    mc_src: "/fake/path"
    mc_dst: "/fake/path"

  tasks:
    - name: stop minecraft service
      ansible.builtin.systemd:
        name: "{{ mc_service }}"
        state: stopped

    # ---------------------------------------------
    # MODS
    
    - name: remove mods dir
      ansible.builtin.file:
        path: "{{ mc_dst }}/mods"
        state: absent

    - name: copy mods from src to dst
      ansible.builtin.copy:
        src: "{{ mc_src }}/mods"
        dest: "{{ mc_dst }}/mods"
        mode: "0744"
        owner: mc
        group: mc
        remote_src: true

    - name: fix ownership recursively on mods dst
      ansible.builtin.file:
        path: "{{ mc_dst }}/mods"
        owner: mc
        group: mc
        recurse: yes

    # ---------------------------------------------
    # CONFIG
    
    - name: copy properties from src to dst
      ansible.builtin.copy:
        src: "{{ mc_src }}/server.properties"
        dest: "{{ mc_dst }}/server.properties"
        remote_src: true
        owner: mc
        group: mc
        mode: "0644"
        force: true

    - name: copy userjvm from src to dst
      ansible.builtin.copy:
        src: "{{ mc_src }}/user_jvm_args.txt"
        dest: "{{ mc_dst }}/user_jvm_args.txt"
        remote_src: true
        owner: mc
        group: mc
        mode: "0644"
        force: true

    # ---------------------------------------------

    - name: start minecraft service
      ansible.builtin.systemd:
        name: "{{ mc_service }}"
        state: started
        daemon_reload: true

    - name: verify service is active
      ansible.builtin.command: "systemctl is-active {{ mc_service }}"
      register: mc_start_check
      changed_when: false
      failed_when: mc_start_check.stdout != "active"
